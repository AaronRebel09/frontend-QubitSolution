import { __decorate } from "tslib";
import { AnimationBuilder, style, animate } from '@angular/animations';
import { Component, EventEmitter, ElementRef, AfterViewInit, Renderer2, ViewEncapsulation, Input } from '@angular/core';
var MglTimelineEntryContentComponent = /** @class */ (function () {
    function MglTimelineEntryContentComponent(elementRef, animationBuilder, renderer) {
        this.elementRef = elementRef;
        this.animationBuilder = animationBuilder;
        this.renderer = renderer;
        this.expandAnimationTiming = '200ms ease';
        this.collapseAnimationTiming = '100ms ease';
        this.animationDone = new EventEmitter();
        this._expanded = false;
    }
    Object.defineProperty(MglTimelineEntryContentComponent.prototype, "expanded", {
        get: function () {
            return this._expanded;
        },
        set: function (expanded) {
            this.contentHeight = this.elementRef.nativeElement.scrollHeight;
            var animate = this._expanded !== expanded;
            this._expanded = expanded;
            animate ? this.animate() : this.setStyle;
        },
        enumerable: true,
        configurable: true
    });
    MglTimelineEntryContentComponent.prototype.ngAfterViewInit = function () {
        this.contentHeight = this.elementRef.nativeElement.scrollHeight;
        this.setStyle();
    };
    MglTimelineEntryContentComponent.prototype.getCollapsedStyle = function () {
        return {
            height: '0px'
        };
    };
    MglTimelineEntryContentComponent.prototype.getExpandedStyle = function () {
        return {
            height: this.contentHeight + 'px'
        };
    };
    MglTimelineEntryContentComponent.prototype.animate = function () {
        var _this = this;
        if (this.expanded) {
            var animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate(this.expandAnimationTiming, style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(function () { return _this.animationDone.emit({ toState: 'expanded' }); });
            animation.play();
        }
        else {
            this.animationBuilder;
            var animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate(this.collapseAnimationTiming, style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(function () { return _this.animationDone.emit({ toState: 'collapsed' }); });
            animation.play();
        }
    };
    MglTimelineEntryContentComponent.prototype.setStyle = function () {
        var _this = this;
        var baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(function (property) {
            _this.renderer.setStyle(_this.elementRef.nativeElement, property, baseStyle[property]);
        });
    };
    MglTimelineEntryContentComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: AnimationBuilder },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], MglTimelineEntryContentComponent.prototype, "expandAnimationTiming", void 0);
    __decorate([
        Input()
    ], MglTimelineEntryContentComponent.prototype, "collapseAnimationTiming", void 0);
    MglTimelineEntryContentComponent = __decorate([
        Component({
            selector: 'mgl-timeline-entry-content',
            template: "<div><ng-content></ng-content></div>",
            encapsulation: ViewEncapsulation.None,
            styles: ["mgl-timeline-entry-content{position:relative;display:block;overflow:hidden}mgl-timeline-entry-content>div{padding:10px}"]
        })
    ], MglTimelineEntryContentComponent);
    return MglTimelineEntryContentComponent;
}());
export { MglTimelineEntryContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtZW50cnktY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLW1nbC10aW1lbGluZS8iLCJzb3VyY2VzIjpbInNyYy90aW1lbGluZS90aW1lbGluZS1lbnRyeS1jb250ZW50L3RpbWVsaW5lLWVudHJ5LWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVF4SDtJQXdCRSwwQ0FBb0IsVUFBc0IsRUFBVSxnQkFBa0MsRUFBVSxRQUFtQjtRQUEvRixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFyQm5ILDBCQUFxQixHQUFHLFlBQVksQ0FBQztRQUdyQyw0QkFBdUIsR0FBRyxZQUFZLENBQUM7UUFHdkMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWhDLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFhb0YsQ0FBQztJQVh4SCxzQkFBSSxzREFBUTthQU9aO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7YUFURCxVQUFhLFFBQWlCO1lBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBQ2hFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDO1lBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFB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LENBMEU1QztJQUFELHVDQUFDO0NBQUEsQUExRUQsSUEwRUM7U0ExRVksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbWF0aW9uQnVpbGRlciwgc3R5bGUsIGFuaW1hdGUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBSZW5kZXJlcjIsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZ2wtdGltZWxpbmUtZW50cnktY29udGVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90aW1lbGluZS1lbnRyeS1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGltZWxpbmUtZW50cnktY29udGVudC5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIE1nbFRpbWVsaW5lRW50cnlDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQElucHV0KClcbiAgZXhwYW5kQW5pbWF0aW9uVGltaW5nID0gJzIwMG1zIGVhc2UnO1xuXG4gIEBJbnB1dCgpXG4gIGNvbGxhcHNlQW5pbWF0aW9uVGltaW5nID0gJzEwMG1zIGVhc2UnO1xuXG4gIHByaXZhdGUgY29udGVudEhlaWdodDtcbiAgYW5pbWF0aW9uRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByaXZhdGUgX2V4cGFuZGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgc2V0IGV4cGFuZGVkKGV4cGFuZGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5jb250ZW50SGVpZ2h0ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIGNvbnN0IGFuaW1hdGUgPSB0aGlzLl9leHBhbmRlZCAhPT0gZXhwYW5kZWQ7XG4gICAgdGhpcy5fZXhwYW5kZWQgPSBleHBhbmRlZDtcbiAgICBhbmltYXRlID8gdGhpcy5hbmltYXRlKCkgOiB0aGlzLnNldFN0eWxlXG4gIH1cblxuICBnZXQgZXhwYW5kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4cGFuZGVkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIGFuaW1hdGlvbkJ1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udGVudEhlaWdodCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICB0aGlzLnNldFN0eWxlKCk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbGxhcHNlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6ICcwcHgnXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBhbmRlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IHRoaXMuY29udGVudEhlaWdodCArICdweCdcbiAgICB9XG4gIH1cblxuICBhbmltYXRlKCkge1xuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICBjb25zdCBhbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbkJ1aWxkZXJcbiAgICAgICAgLmJ1aWxkKFtcbiAgICAgICAgICBzdHlsZSh0aGlzLmdldENvbGxhcHNlZFN0eWxlKCkpLFxuICAgICAgICAgIGFuaW1hdGUodGhpcy5leHBhbmRBbmltYXRpb25UaW1pbmcsIHN0eWxlKHRoaXMuZ2V0RXhwYW5kZWRTdHlsZSgpKSksXG4gICAgICAgIF0pXG4gICAgICAgIC5jcmVhdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpXG4gICAgICBhbmltYXRpb24ub25Eb25lKCgpID0+IHRoaXMuYW5pbWF0aW9uRG9uZS5lbWl0KHsgdG9TdGF0ZTogJ2V4cGFuZGVkJyB9KSk7XG4gICAgICBhbmltYXRpb24ucGxheSgpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uQnVpbGRlclxuICAgICAgY29uc3QgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25CdWlsZGVyXG4gICAgICAgIC5idWlsZChbXG4gICAgICAgICAgc3R5bGUodGhpcy5nZXRFeHBhbmRlZFN0eWxlKCkpLFxuICAgICAgICAgIGFuaW1hdGUodGhpcy5jb2xsYXBzZUFuaW1hdGlvblRpbWluZywgc3R5bGUodGhpcy5nZXRDb2xsYXBzZWRTdHlsZSgpKSksXG4gICAgICAgIF0pXG4gICAgICAgIC5jcmVhdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpXG4gICAgICBhbmltYXRpb24ub25Eb25lKCgpID0+IHRoaXMuYW5pbWF0aW9uRG9uZS5lbWl0KHsgdG9TdGF0ZTogJ2NvbGxhcHNlZCcgfSkpO1xuICAgICAgYW5pbWF0aW9uLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBzZXRTdHlsZSgpIHtcbiAgICBjb25zdCBiYXNlU3R5bGUgPSB0aGlzLmV4cGFuZGVkID8gdGhpcy5nZXRFeHBhbmRlZFN0eWxlKCkgOiB0aGlzLmdldENvbGxhcHNlZFN0eWxlKCk7XG4gICAgT2JqZWN0LmtleXMoYmFzZVN0eWxlKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHByb3BlcnR5LCBiYXNlU3R5bGVbcHJvcGVydHldKVxuICAgIH0pXG4gIH1cblxufVxuIl19