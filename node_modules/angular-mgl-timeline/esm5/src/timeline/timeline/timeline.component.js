import { __decorate } from "tslib";
import { QueryList, ElementRef, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { MglTimelineEntryComponent } from './../timeline-entry/timeline-entry.component';
import { Component, Input, ContentChildren, HostListener } from '@angular/core';
var MglTimelineComponent = /** @class */ (function () {
    function MglTimelineComponent(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.toggle = true;
        this.mobileWidthThreshold = 640;
        this.alternate = true;
        this.side = 'left';
        this._focusOnOpen = false;
        this.subscriptions = [];
    }
    Object.defineProperty(MglTimelineComponent.prototype, "mobile", {
        get: function () {
            return this.elementRef.nativeElement.classList.contains('mobile');
        },
        set: function (value) {
            this.content && this.content.forEach(function (entry) { return entry.mobile = value; });
            this.elementRef.nativeElement.classList.toggle('mobile', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineComponent.prototype, "focusOnOpen", {
        get: function () {
            return this._focusOnOpen;
        },
        set: function (focusOnOpen) {
            this.content && this.content.forEach(function (entry) { return entry.focusOnOpen = focusOnOpen; });
            this._focusOnOpen = focusOnOpen;
        },
        enumerable: true,
        configurable: true
    });
    MglTimelineComponent.prototype.ngOnChanges = function (simpleChanges) {
        this.updateContent();
    };
    MglTimelineComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    MglTimelineComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.mobile = this.elementRef.nativeElement.clientWidth < this.mobileWidthThreshold;
        setTimeout(function () { return _this.updateContent(); });
        this.content.changes.subscribe(function (changes) {
            _this.updateContent();
        });
    };
    MglTimelineComponent.prototype.updateContent = function () {
        var _this = this;
        this.ngOnDestroy();
        if (this.content) {
            this.content.forEach(function (entry, index) {
                if (_this.toggle) {
                    _this.subscriptions.push(entry.changed.subscribe(function (state) {
                        if (state === true) {
                            _this.content.filter(function (e) { return e !== entry; }).forEach(function (e) { return e.collapse(); });
                        }
                    }));
                }
                entry.alternate = _this.alternate ? (index % 2 !== 0) : (_this.side === 'right');
                entry.mobile = _this.mobile;
                entry.focusOnOpen = _this.focusOnOpen;
            });
        }
    };
    MglTimelineComponent.prototype.onResize = function (ev) {
        this.mobile = this.elementRef.nativeElement.clientWidth < this.mobileWidthThreshold;
    };
    MglTimelineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], MglTimelineComponent.prototype, "toggle", void 0);
    __decorate([
        Input()
    ], MglTimelineComponent.prototype, "mobileWidthThreshold", void 0);
    __decorate([
        Input()
    ], MglTimelineComponent.prototype, "alternate", void 0);
    __decorate([
        Input()
    ], MglTimelineComponent.prototype, "side", void 0);
    __decorate([
        Input()
    ], MglTimelineComponent.prototype, "focusOnOpen", null);
    __decorate([
        ContentChildren(MglTimelineEntryComponent)
    ], MglTimelineComponent.prototype, "content", void 0);
    __decorate([
        HostListener('window:resize', ['$event'])
    ], MglTimelineComponent.prototype, "onResize", null);
    MglTimelineComponent = __decorate([
        Component({
            selector: 'mgl-timeline',
            template: "<div class=\"mgl-timeline-line\"></div>\n<ng-content></ng-content>",
            encapsulation: ViewEncapsulation.None,
            styles: ["mgl-timeline{position:relative;display:block;padding:50px 0}mgl-timeline .mgl-timeline-line{position:absolute;top:0;height:100%;background-color:#a0a0a0;left:50%;width:10px;-webkit-transform:translateX(-50%);transform:translateX(-50%)}mgl-timeline.mobile .mgl-timeline-line{left:20px;-webkit-transform:none;transform:none}"]
        })
    ], MglTimelineComponent);
    return MglTimelineComponent;
}());
export { MglTimelineComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1tZ2wtdGltZWxpbmUvIiwic291cmNlcyI6WyJzcmMvdGltZWxpbmUvdGltZWxpbmUvdGltZWxpbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUN6RixPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQXVDLFlBQVksRUFBd0IsTUFBTSxlQUFlLENBQUM7QUFRM0k7SUF3Q0UsOEJBQW9CLFVBQXNCLEVBQVUsaUJBQW9DO1FBQXBFLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBckN4RixXQUFNLEdBQVksSUFBSSxDQUFDO1FBR3ZCLHlCQUFvQixHQUFXLEdBQUcsQ0FBQztRQUduQyxjQUFTLEdBQVksSUFBSSxDQUFDO1FBRzFCLFNBQUksR0FBVyxNQUFNLENBQUM7UUFXZCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQVlyQixrQkFBYSxHQUFtQixFQUFFLENBQUM7SUFLaUQsQ0FBQztJQTFCN0Ysc0JBQUksd0NBQU07YUFLVjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRSxDQUFDO2FBUEQsVUFBVyxLQUFjO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO1lBQ3BFLElBQUksQ0FBQyxVQUFVLENBQUMs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bkM7UUFEQyxLQUFLLEVBQUU7MkRBQ2tCO0lBRzFCO1FBREMsS0FBSyxFQUFFO3NEQUNjO0lBY3RCO1FBREMsS0FBSyxFQUFFOzJEQUlQO0lBU0Q7UUFEQyxlQUFlLENBQUMseUJBQXlCLENBQUM7eURBQ1c7SUF3Q3REO1FBREMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dEQUd6QztJQWhGVSxvQkFBb0I7UUFOaEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIsOEVBQXdDO1lBRXhDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztTQUN0QyxDQUFDO09BQ1csb0JBQW9CLENBaUZoQztJQUFELDJCQUFDO0NBQUEsQUFqRkQsSUFpRkM7U0FqRlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlMaXN0LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1nbFRpbWVsaW5lRW50cnlDb21wb25lbnQgfSBmcm9tICcuLy4uL3RpbWVsaW5lLWVudHJ5L3RpbWVsaW5lLWVudHJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDb250ZW50Q2hpbGRyZW4sIEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBIb3N0TGlzdGVuZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzL1N1YnNjcmlwdGlvbic7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZ2wtdGltZWxpbmUnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGltZWxpbmUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90aW1lbGluZS5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIE1nbFRpbWVsaW5lQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpXG4gIHRvZ2dsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgbW9iaWxlV2lkdGhUaHJlc2hvbGQ6IG51bWJlciA9IDY0MDtcblxuICBASW5wdXQoKVxuICBhbHRlcm5hdGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIEBJbnB1dCgpXG4gIHNpZGU6IHN0cmluZyA9ICdsZWZ0JztcblxuICBzZXQgbW9iaWxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5jb250ZW50ICYmIHRoaXMuY29udGVudC5mb3JFYWNoKGVudHJ5ID0+IGVudHJ5Lm1vYmlsZSA9IHZhbHVlKTtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdtb2JpbGUnLCB2YWx1ZSlcbiAgfVxuXG4gIGdldCBtb2JpbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnbW9iaWxlJyk7XG4gIH1cblxuICBwcml2YXRlIF9mb2N1c09uT3BlbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBmb2N1c09uT3Blbihmb2N1c09uT3Blbikge1xuICAgIHRoaXMuY29udGVudCAmJiB0aGlzLmNvbnRlbnQuZm9yRWFjaChlbnRyeSA9PiBlbnRyeS5mb2N1c09uT3BlbiA9IGZvY3VzT25PcGVuKTtcbiAgICB0aGlzLl9mb2N1c09uT3BlbiA9IGZvY3VzT25PcGVuO1xuICB9XG5cbiAgZ2V0IGZvY3VzT25PcGVuKCkge1xuICAgIHJldHVybiB0aGlzLl9mb2N1c09uT3BlbjtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICBAQ29udGVudENoaWxkcmVuKE1nbFRpbWVsaW5lRW50cnlDb21wb25lbnQpXG4gIHByaXZhdGUgY29udGVudDogUXVlcnlMaXN0PE1nbFRpbWVsaW5lRW50cnlDb21wb25lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxuXG4gIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLnVwZGF0ZUNvbnRlbnQoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5tb2JpbGUgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCA8IHRoaXMubW9iaWxlV2lkdGhUaHJlc2hvbGQ7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZUNvbnRlbnQoKSk7XG4gICAgdGhpcy5jb250ZW50LmNoYW5nZXMuc3Vic2NyaWJlKGNoYW5nZXMgPT4ge1xuICAgICAgdGhpcy51cGRhdGVDb250ZW50KCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUNvbnRlbnQoKSB7XG4gICAgdGhpcy5uZ09uRGVzdHJveSgpO1xuICAgIGlmICh0aGlzLmNvbnRlbnQpIHtcbiAgICAgIHRoaXMuY29udGVudC5mb3JFYWNoKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudG9nZ2xlKSB7XG4gICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAgICAgICBlbnRyeS5jaGFuZ2VkLnN1YnNjcmliZShzdGF0ZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5maWx0ZXIoZSA9PiBlICE9PSBlbnRyeSkuZm9yRWFjaChlID0+IGUuY29sbGFwc2UoKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyeS5hbHRlcm5hdGUgPSB0aGlzLmFsdGVybmF0ZSA/IChpbmRleCAlIDIgIT09IDApIDogKHRoaXMuc2lkZSA9PT0gJ3JpZ2h0Jyk7XG4gICAgICAgIGVudHJ5Lm1vYmlsZSA9IHRoaXMubW9iaWxlO1xuICAgICAgICBlbnRyeS5mb2N1c09uT3BlbiA9IHRoaXMuZm9jdXNPbk9wZW47XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcbiAgb25SZXNpemUoZXY6IEtleWJvYXJkRXZlbnQpIHtcbiAgICB0aGlzLm1vYmlsZSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoIDwgdGhpcy5tb2JpbGVXaWR0aFRocmVzaG9sZDtcbiAgfVxufVxuIl19