import { __decorate } from "tslib";
import { AnimationBuilder, style, animate } from '@angular/animations';
import { Component, EventEmitter, ElementRef, AfterViewInit, Renderer2, ViewEncapsulation, Input } from '@angular/core';
let MglTimelineEntryContentComponent = class MglTimelineEntryContentComponent {
    constructor(elementRef, animationBuilder, renderer) {
        this.elementRef = elementRef;
        this.animationBuilder = animationBuilder;
        this.renderer = renderer;
        this.expandAnimationTiming = '200ms ease';
        this.collapseAnimationTiming = '100ms ease';
        this.animationDone = new EventEmitter();
        this._expanded = false;
    }
    set expanded(expanded) {
        this.contentHeight = this.elementRef.nativeElement.scrollHeight;
        const animate = this._expanded !== expanded;
        this._expanded = expanded;
        animate ? this.animate() : this.setStyle;
    }
    get expanded() {
        return this._expanded;
    }
    ngAfterViewInit() {
        this.contentHeight = this.elementRef.nativeElement.scrollHeight;
        this.setStyle();
    }
    getCollapsedStyle() {
        return {
            height: '0px'
        };
    }
    getExpandedStyle() {
        return {
            height: this.contentHeight + 'px'
        };
    }
    animate() {
        if (this.expanded) {
            const animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate(this.expandAnimationTiming, style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(() => this.animationDone.emit({ toState: 'expanded' }));
            animation.play();
        }
        else {
            this.animationBuilder;
            const animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate(this.collapseAnimationTiming, style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            animation.onDone(() => this.animationDone.emit({ toState: 'collapsed' }));
            animation.play();
        }
    }
    setStyle() {
        const baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(property => {
            this.renderer.setStyle(this.elementRef.nativeElement, property, baseStyle[property]);
        });
    }
};
MglTimelineEntryContentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AnimationBuilder },
    { type: Renderer2 }
];
__decorate([
    Input()
], MglTimelineEntryContentComponent.prototype, "expandAnimationTiming", void 0);
__decorate([
    Input()
], MglTimelineEntryContentComponent.prototype, "collapseAnimationTiming", void 0);
MglTimelineEntryContentComponent = __decorate([
    Component({
        selector: 'mgl-timeline-entry-content',
        template: "<div><ng-content></ng-content></div>",
        encapsulation: ViewEncapsulation.None,
        styles: ["mgl-timeline-entry-content{position:relative;display:block;overflow:hidden}mgl-timeline-entry-content>div{padding:10px}"]
    })
], MglTimelineEntryContentComponent);
export { MglTimelineEntryContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtZW50cnktY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLW1nbC10aW1lbGluZS8iLCJzb3VyY2VzIjpbInNyYy90aW1lbGluZS90aW1lbGluZS1lbnRyeS1jb250ZW50L3RpbWVsaW5lLWVudHJ5LWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVF4SCxJQUFhLGdDQUFnQyxHQUE3QyxNQUFhLGdDQUFnQztJQXdCM0MsWUFBb0IsVUFBc0IsRUFBVSxnQkFBa0MsRUFBVSxRQUFtQjtRQUEvRixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFyQm5ILDBCQUFxQixHQUFHLFlBQVksQ0FBQztRQUdyQyw0QkFBdUIsR0FBRyxZQUFZLENBQUM7UUFHdkMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRWhDLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFhb0YsQ0FBQztJQVh4SCxJQUFJLFFBQVEsQ0FBQyxRQUFpQjtRQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUNoRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxLQUFLLFFBQVEsQ0FBQztRQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxD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ZXNDb250ZW50IjpbImltcG9ydCB7IEFuaW1hdGlvbkJ1aWxkZXIsIHN0eWxlLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIyLCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWdsLXRpbWVsaW5lLWVudHJ5LWNvbnRlbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGltZWxpbmUtZW50cnktY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RpbWVsaW5lLWVudHJ5LWNvbnRlbnQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBNZ2xUaW1lbGluZUVudHJ5Q29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIEBJbnB1dCgpXG4gIGV4cGFuZEFuaW1hdGlvblRpbWluZyA9ICcyMDBtcyBlYXNlJztcblxuICBASW5wdXQoKVxuICBjb2xsYXBzZUFuaW1hdGlvblRpbWluZyA9ICcxMDBtcyBlYXNlJztcblxuICBwcml2YXRlIGNvbnRlbnRIZWlnaHQ7XG4gIGFuaW1hdGlvbkRvbmUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBwcml2YXRlIF9leHBhbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHNldCBleHBhbmRlZChleHBhbmRlZDogYm9vbGVhbikge1xuICAgIHRoaXMuY29udGVudEhlaWdodCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICBjb25zdCBhbmltYXRlID0gdGhpcy5fZXhwYW5kZWQgIT09IGV4cGFuZGVkO1xuICAgIHRoaXMuX2V4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgYW5pbWF0ZSA/IHRoaXMuYW5pbWF0ZSgpIDogdGhpcy5zZXRTdHlsZVxuICB9XG5cbiAgZ2V0IGV4cGFuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9leHBhbmRlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBhbmltYXRpb25CdWlsZGVyOiBBbmltYXRpb25CdWlsZGVyLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRlbnRIZWlnaHQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgdGhpcy5zZXRTdHlsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb2xsYXBzZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiAnMHB4J1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0RXhwYW5kZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiB0aGlzLmNvbnRlbnRIZWlnaHQgKyAncHgnXG4gICAgfVxuICB9XG5cbiAgYW5pbWF0ZSgpIHtcbiAgICBpZiAodGhpcy5leHBhbmRlZCkge1xuICAgICAgY29uc3QgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25CdWlsZGVyXG4gICAgICAgIC5idWlsZChbXG4gICAgICAgICAgc3R5bGUodGhpcy5nZXRDb2xsYXBzZWRTdHlsZSgpKSxcbiAgICAgICAgICBhbmltYXRlKHRoaXMuZXhwYW5kQW5pbWF0aW9uVGltaW5nLCBzdHlsZSh0aGlzLmdldEV4cGFuZGVkU3R5bGUoKSkpLFxuICAgICAgICBdKVxuICAgICAgICAuY3JlYXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KVxuICAgICAgYW5pbWF0aW9uLm9uRG9uZSgoKSA9PiB0aGlzLmFuaW1hdGlvbkRvbmUuZW1pdCh7IHRvU3RhdGU6ICdleHBhbmRlZCcgfSkpO1xuICAgICAgYW5pbWF0aW9uLnBsYXkoKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkJ1aWxkZXJcbiAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uQnVpbGRlclxuICAgICAgICAuYnVpbGQoW1xuICAgICAgICAgIHN0eWxlKHRoaXMuZ2V0RXhwYW5kZWRTdHlsZSgpKSxcbiAgICAgICAgICBhbmltYXRlKHRoaXMuY29sbGFwc2VBbmltYXRpb25UaW1pbmcsIHN0eWxlKHRoaXMuZ2V0Q29sbGFwc2VkU3R5bGUoKSkpLFxuICAgICAgICBdKVxuICAgICAgICAuY3JlYXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KVxuICAgICAgYW5pbWF0aW9uLm9uRG9uZSgoKSA9PiB0aGlzLmFuaW1hdGlvbkRvbmUuZW1pdCh7IHRvU3RhdGU6ICdjb2xsYXBzZWQnIH0pKTtcbiAgICAgIGFuaW1hdGlvbi5wbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgc2V0U3R5bGUoKSB7XG4gICAgY29uc3QgYmFzZVN0eWxlID0gdGhpcy5leHBhbmRlZCA/IHRoaXMuZ2V0RXhwYW5kZWRTdHlsZSgpIDogdGhpcy5nZXRDb2xsYXBzZWRTdHlsZSgpO1xuICAgIE9iamVjdC5rZXlzKGJhc2VTdHlsZSkuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgYmFzZVN0eWxlW3Byb3BlcnR5XSlcbiAgICB9KVxuICB9XG5cbn1cbiJdfQ==