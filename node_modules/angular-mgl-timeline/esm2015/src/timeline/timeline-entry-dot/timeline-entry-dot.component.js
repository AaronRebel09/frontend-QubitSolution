import { __decorate, __param } from "tslib";
import { Component, Input, HostBinding, ElementRef, EventEmitter, Output, AfterViewInit, Renderer2, ChangeDetectorRef, Inject, ViewEncapsulation } from '@angular/core';
import { AnimationBuilder, style, animate } from '@angular/animations';
import { DOCUMENT } from '@angular/common';
let MglTimelineEntryDotComponent = class MglTimelineEntryDotComponent {
    constructor(animationBuilder, elementRef, renderer, changeDetectorRef, document) {
        this.animationBuilder = animationBuilder;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this._expanded = false;
        this._alternate = false;
        this._mobile = false;
        this._size = 50;
        this.animationDone = new EventEmitter();
        this.expandAnimationTiming = '200ms ease';
        this.collapseAnimationTiming = '100ms ease';
        this.clazz = 'primary';
    }
    set size(size) {
        this._size = size;
        this.setStyle();
    }
    get size() {
        return this._size;
    }
    set alternate(alternate) {
        this._alternate = alternate;
        this.setStyle();
    }
    get alternate() {
        return this._alternate;
    }
    set mobile(mobile) {
        this._mobile = mobile;
        this.setStyle();
    }
    get mobile() {
        return this._mobile;
    }
    set expanded(expanded) {
        const animate = this._expanded !== expanded;
        this._expanded = expanded;
        animate ? this.animate() : this.setStyle();
    }
    get expanded() {
        return this._expanded;
    }
    ngAfterViewInit() {
        this.initialStyle = this.document.defaultView.getComputedStyle(this.elementRef.nativeElement);
        this.setStyle();
        this.changeDetectorRef.detectChanges();
    }
    getCollapsedStyle() {
        return {
            top: '50%',
            left: (this.alternate || this.mobile) ? '-5px' : 'calc(100% + 5px)',
            width: this.size + 'px',
            height: this.size + 'px',
            opacity: 1,
            transform: 'translateY(-50%) translateX(-50%)',
            boxShadow: this.initialStyle && this.initialStyle.boxShadow,
            borderRadius: '100px'
        };
    }
    getTransitionStyle() {
        return Object.assign(Object.assign({}, this.getCollapsedStyle()), { left: '50%', opacity: 0.5, boxShadow: 'none' });
    }
    getExpandedStyle() {
        return Object.assign(Object.assign({}, this.getTransitionStyle()), { left: '0', transform: 'translateX(0) translateY(-50%)', width: '100%', height: '100%', opacity: 1, borderRadius: 0 });
    }
    animate() {
        this.destroyAnimation();
        if (this.expanded) {
            this.animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate(this.expandAnimationTiming, style(this.getTransitionStyle())),
                animate(this.expandAnimationTiming, style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(() => this.animationDone.emit({ toState: 'expanded' }));
            this.animation.play();
        }
        else {
            this.animationBuilder;
            this.animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate(this.collapseAnimationTiming, style(this.getTransitionStyle())),
                animate(this.collapseAnimationTiming, style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(() => this.animationDone.emit({ toState: 'collapsed' }));
            this.animation.play();
        }
    }
    setStyle() {
        this.destroyAnimation();
        const baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(property => {
            this.renderer.setStyle(this.elementRef.nativeElement, property, baseStyle[property]);
        });
    }
    destroyAnimation() {
        if (this.animation) {
            this.animation.destroy();
            delete this.animation;
        }
    }
};
MglTimelineEntryDotComponent.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
__decorate([
    Input()
], MglTimelineEntryDotComponent.prototype, "expandAnimationTiming", void 0);
__decorate([
    Input()
], MglTimelineEntryDotComponent.prototype, "collapseAnimationTiming", void 0);
__decorate([
    Input('class'),
    HostBinding('class')
], MglTimelineEntryDotComponent.prototype, "clazz", void 0);
__decorate([
    Input()
], MglTimelineEntryDotComponent.prototype, "size", null);
MglTimelineEntryDotComponent = __decorate([
    Component({
        selector: 'mgl-timeline-entry-dot',
        template: "<ng-content></ng-content>\n",
        encapsulation: ViewEncapsulation.None,
        styles: ["mgl-timeline-entry-dot{display:block;position:absolute}"]
    }),
    __param(4, Inject(DOCUMENT))
], MglTimelineEntryDotComponent);
export { MglTimelineEntryDotComponent };
//# sourceMappingURL=data:application/json;base64,