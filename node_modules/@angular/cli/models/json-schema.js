"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const jsonSchemaTraverse = require("json-schema-traverse");
function convertSchemaToOptions(schema) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = yield getOptions(schema);
        return options;
    });
}
exports.convertSchemaToOptions = convertSchemaToOptions;
function getOptions(schemaText, onlyRootProperties = true) {
    // TODO: Use devkit core's visitJsonSchema
    return new Promise((resolve) => {
        const fullSchema = core_1.parseJson(schemaText);
        if (!core_1.isJsonObject(fullSchema)) {
            return Promise.resolve([]);
        }
        const traverseOptions = {};
        const options = [];
        function postCallback(schema, jsonPointer, _rootSchema, _parentJsonPointer, parentKeyword, _parentSchema, property) {
            if (parentKeyword === 'properties') {
                let includeOption = true;
                if (onlyRootProperties && isPropertyNested(jsonPointer)) {
                    includeOption = false;
                }
                const description = typeof schema.description == 'string' ? schema.description : '';
                const type = typeof schema.type == 'string' ? schema.type : '';
                let defaultValue = undefined;
                if (schema.default !== null) {
                    if (typeof schema.default !== 'object') {
                        defaultValue = schema.default;
                    }
                }
                let $default = undefined;
                if (schema.$default !== null && core_1.isJsonObject(schema.$default)) {
                    $default = schema.$default;
                }
                let required = false;
                if (typeof schema.required === 'boolean') {
                    required = schema.required;
                }
                let aliases = undefined;
                if (typeof schema.aliases === 'object' && Array.isArray(schema.aliases)) {
                    aliases = schema.aliases;
                }
                let format = undefined;
                if (typeof schema.format === 'string') {
                    format = schema.format;
                }
                let hidden = false;
                if (typeof schema.hidden === 'boolean') {
                    hidden = schema.hidden;
                }
                const option = {
                    name: property,
                    // ...schema,
                    description,
                    type,
                    default: defaultValue,
                    $default,
                    required,
                    aliases,
                    format,
                    hidden,
                };
                if (includeOption) {
                    options.push(option);
                }
            }
            else if (schema === fullSchema) {
                resolve(options);
            }
        }
        const callbacks = { post: postCallback };
        jsonSchemaTraverse(fullSchema, traverseOptions, callbacks);
    });
}
function isPropertyNested(jsonPath) {
    return jsonPath.split('/')
        .filter(part => part == 'properties' || part == 'items')
        .length > 1;
}
function parseSchema(schema) {
    const parsedSchema = core_1.parseJson(schema);
    if (parsedSchema === null || !core_1.isJsonObject(parsedSchema)) {
        return null;
    }
    return parsedSchema;
}
exports.parseSchema = parseSchema;
//# sourceMappingURL=data:application/json;base64,