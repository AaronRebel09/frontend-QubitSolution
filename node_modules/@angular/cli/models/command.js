"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-global-tslint-disable no-any
const core_1 = require("@angular-devkit/core");
var CommandScope;
(function (CommandScope) {
    CommandScope[CommandScope["everywhere"] = 0] = "everywhere";
    CommandScope[CommandScope["inProject"] = 1] = "inProject";
    CommandScope[CommandScope["outsideProject"] = 2] = "outsideProject";
})(CommandScope = exports.CommandScope || (exports.CommandScope = {}));
var ArgumentStrategy;
(function (ArgumentStrategy) {
    ArgumentStrategy[ArgumentStrategy["MapToOptions"] = 0] = "MapToOptions";
    ArgumentStrategy[ArgumentStrategy["Nothing"] = 1] = "Nothing";
})(ArgumentStrategy = exports.ArgumentStrategy || (exports.ArgumentStrategy = {}));
class Command {
    constructor(context, logger) {
        this.allowMissingWorkspace = false;
        this.additionalSchemas = [];
        this.logger = logger;
        if (context) {
            this.project = context.project;
        }
    }
    addOptions(options) {
        this.options = (this.options || []).concat(options);
    }
    initializeRaw(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this._rawArgs = args;
            return args;
        });
    }
    initialize(_options) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
    validate(_options) {
        return true;
    }
    printHelp(commandName, description, options) {
        if (description) {
            this.logger.info(description);
        }
        this.printHelpUsage(commandName, this.options);
        this.printHelpOptions(this.options);
    }
    _getArguments(options) {
        function _getArgIndex(def) {
            if (def === undefined || def.$source !== 'argv' || typeof def.index !== 'number') {
                // If there's no proper order, this argument is wonky. We will show it at the end only
                // (after all other arguments).
                return Infinity;
            }
            return def.index;
        }
        return options
            .filter(opt => this.isArgument(opt))
            .sort((a, b) => _getArgIndex(a.$default) - _getArgIndex(b.$default));
    }
    printHelpUsage(name, options) {
        const args = this._getArguments(options);
        const opts = options.filter(opt => !this.isArgument(opt));
        const argDisplay = args && args.length > 0
            ? ' ' + args.map(a => `<${a.name}>`).join(' ')
            : '';
        const optionsDisplay = opts && opts.length > 0
            ? ` [options]`
            : ``;
        this.logger.info(`usage: ng ${name}${argDisplay}${optionsDisplay}`);
    }
    isArgument(option) {
        let isArg = false;
        if (option.$default !== undefined && option.$default.$source === 'argv') {
            isArg = true;
        }
        return isArg;
    }
    printHelpOptions(options) {
        if (!options) {
            return;
        }
        const args = options.filter(opt => this.isArgument(opt));
        const opts = options.filter(opt => !this.isArgument(opt));
        if (args.length > 0) {
            this.logger.info(`arguments:`);
            args.forEach(o => {
                this.logger.info(`  ${core_1.terminal.cyan(o.name)}`);
                this.logger.info(`    ${o.description}`);
            });
        }
        if (this.options.length > 0) {
            this.logger.info(`options:`);
            opts
                .filter(o => !o.hidden)
                .sort((a, b) => a.name >= b.name ? 1 : -1)
                .forEach(o => {
                const aliases = o.aliases && o.aliases.length > 0
                    ? '(' + o.aliases.map(a => `-${a}`).join(' ') + ')'
                    : '';
                this.logger.info(`  ${core_1.terminal.cyan('--' + o.name)} ${aliases}`);
                this.logger.info(`    ${o.description}`);
            });
        }
    }
}
exports.Command = Command;
//# sourceMappingURL=data:application/json;base64,