"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.default = void 0;

var _OktaAuthBase = _interopRequireDefault(require("../OktaAuthBase"));

var _fetchRequest = _interopRequireDefault(require("../fetch/fetchRequest"));

var _builderUtil = require("../builderUtil");

var _serverStorage = _interopRequireDefault(require("./serverStorage"));

var features = _interopRequireWildcard(require("./features"));

var _oidc = require("../oidc");

/*!
 * Copyright (c) 2018-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint-disable complexity */

/* eslint-disable max-statements */
const PACKAGE_JSON = require('../../package.json');

const SDK_VERSION = PACKAGE_JSON.version;

class OktaAuthNode extends _OktaAuthBase.default {
  constructor(args = {}) {
    args = Object.assign({
      httpRequestClient: _fetchRequest.default,
      storageUtil: args.storageUtil || _serverStorage.default,
      storageManager: Object.assign({
        token: {
          storageTypes: ['memory']
        },
        cache: {
          storageTypes: ['memory']
        },
        transaction: {
          storageTypes: ['memory']
        }
      })
    }, args);
    super(args); // Add shim for compatibility. This will be removed in next major version. OKTA-362589

    Object.assign(this.options.storageUtil, {
      getHttpCache: this.storageManager.getHttpCache.bind(this.storageManager)
    });
    this.userAgent = (0, _builderUtil.getUserAgent)(args, `okta-auth-js-server/${SDK_VERSION}`);
    this.token = {
      decode: _oidc.decodeToken,
      prepareTokenParams: _oidc.prepareTokenParams.bind(null, this),
      exchangeCodeForTokens: _oidc.exchangeCodeForTokens.bind(null, this)
    };
  }

} // Hoist feature detection functions to static type


OktaAuthNode.features = OktaAuthNode.prototype.features = features;
var _default = OktaAuthNode;
exports.default = _default;
module.exports = exports.default;